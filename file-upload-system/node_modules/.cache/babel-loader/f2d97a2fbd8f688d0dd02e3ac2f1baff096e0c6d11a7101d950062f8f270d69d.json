{"ast":null,"code":"var _jsxFileName = \"/Users/pranavs/Documents/React/Projects/file-upload-system/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst S3Uploader = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const handleFileChange = e => {\n    setSelectedFile(e.target.files[0]);\n  };\n  const uploadFile = async () => {\n    if (!selectedFile) return;\n    const s3 = new S3Client({\n      region: 'YOUR_REGION',\n      credentials: {\n        accessKeyId: 'YOUR_ACCESS_KEY_ID',\n        secretAccessKey: 'YOUR_SECRET_ACCESS_KEY'\n      }\n    });\n    const params = {\n      Bucket: 'YOUR_BUCKET_NAME',\n      Key: selectedFile.name,\n      Body: selectedFile\n    };\n    try {\n      const command = new PutObjectCommand(params);\n      const response = await s3.send(command);\n      console.log('File uploaded successfully:', response);\n    } catch (error) {\n      console.error('Upload failed:', error);\n    } finally {\n      setUploading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadFile,\n      disabled: uploading,\n      children: uploading ? 'Uploading...' : 'Upload File'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), uploadProgress > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Progress: \", uploadProgress, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(S3Uploader, \"W52YhCmXd+OlDvoiFDoFgxmVXYU=\");\n_c = S3Uploader;\nexport default S3Uploader;\nvar _c;\n$RefreshReg$(_c, \"S3Uploader\");","map":{"version":3,"names":["React","useState","S3Client","PutObjectCommand","jsxDEV","_jsxDEV","S3Uploader","_s","selectedFile","setSelectedFile","uploading","setUploading","uploadProgress","setUploadProgress","handleFileChange","e","target","files","uploadFile","s3","region","credentials","accessKeyId","secretAccessKey","params","Bucket","Key","name","Body","command","response","send","console","log","error","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/pranavs/Documents/React/Projects/file-upload-system/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\n\nconst S3Uploader = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  const handleFileChange = (e) => {\n    setSelectedFile(e.target.files[0]);\n  };\n\n  const uploadFile = async () => {\n    if (!selectedFile) return;\n\n    const s3 = new S3Client({\n      region: 'YOUR_REGION',\n      credentials: {\n        accessKeyId: 'YOUR_ACCESS_KEY_ID',\n        secretAccessKey: 'YOUR_SECRET_ACCESS_KEY'\n      }\n    });\n\n    const params = {\n      Bucket: 'YOUR_BUCKET_NAME',\n      Key: selectedFile.name,\n      Body: selectedFile,\n    };\n\n    try {\n      const command = new PutObjectCommand(params);\n      const response = await s3.send(command);\n      console.log('File uploaded successfully:', response);\n    } catch (error) {\n      console.error('Upload failed:', error);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={uploadFile} disabled={uploading}>\n        {uploading ? 'Uploading...' : 'Upload File'}\n      </button>\n      {uploadProgress > 0 && <div>Progress: {uploadProgress}%</div>}\n    </div>\n  );\n};\n\nexport default S3Uploader;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,EAAEC,gBAAgB,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAEvD,MAAMa,gBAAgB,GAAIC,CAAC,IAAK;IAC9BN,eAAe,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACpC,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACV,YAAY,EAAE;IAEnB,MAAMW,EAAE,GAAG,IAAIjB,QAAQ,CAAC;MACtBkB,MAAM,EAAE,aAAa;MACrBC,WAAW,EAAE;QACXC,WAAW,EAAE,oBAAoB;QACjCC,eAAe,EAAE;MACnB;IACF,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG;MACbC,MAAM,EAAE,kBAAkB;MAC1BC,GAAG,EAAElB,YAAY,CAACmB,IAAI;MACtBC,IAAI,EAAEpB;IACR,CAAC;IAED,IAAI;MACF,MAAMqB,OAAO,GAAG,IAAI1B,gBAAgB,CAACqB,MAAM,CAAC;MAC5C,MAAMM,QAAQ,GAAG,MAAMX,EAAE,CAACY,IAAI,CAACF,OAAO,CAAC;MACvCG,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEH,QAAQ,CAAC;IACtD,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACxC,CAAC,SAAS;MACRvB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEN,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAO+B,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEvB;IAAiB;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjDpC,OAAA;MAAQqC,OAAO,EAAExB,UAAW;MAACyB,QAAQ,EAAEjC,SAAU;MAAAyB,QAAA,EAC9CzB,SAAS,GAAG,cAAc,GAAG;IAAa;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,EACR7B,cAAc,GAAG,CAAC,iBAAIP,OAAA;MAAA8B,QAAA,GAAK,YAAU,EAACvB,cAAc,EAAC,GAAC;IAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV,CAAC;AAAClC,EAAA,CA9CID,UAAU;AAAAsC,EAAA,GAAVtC,UAAU;AAgDhB,eAAeA,UAAU;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}